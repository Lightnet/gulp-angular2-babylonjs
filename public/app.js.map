{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/browserify/lib/_empty.js","src/app.js","src/index.js"],"names":[],"mappings":"AAAA;ACAA;;;;;;;;;;;kCCAA;;AAGA;;AAEA;;;AAGA;;AANA;;AAEA;;AAEA;;AAIA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgDa,O,WAAA,O,WAdZ,qBAAU;AACP,cAAU,UADH;AAEP;AAFO,CAAV,C;AAeG,uBAAa;AAAA;;AACT,YAAI,OAAO,IAAX;AACA,gBAAQ,GAAR,CAAY,IAAZ;AACA,gBAAQ,GAAR,CAAY,UAAZ;AACA,eAAO,gBAAP,CAAwB,kBAAxB,EAA4C,YAAU;AAClD,iBAAK,IAAL;AACH,SAFD;AAGH;;;;+BACK;AACF;AACA,gBAAI,SAAS,SAAS,cAAT,CAAwB,cAAxB,CAAb;;AAEA;AACA,gBAAI,SAAS,IAAI,QAAQ,MAAZ,CAAmB,MAAnB,EAA2B,IAA3B,CAAb;;AAEA;AACA,gBAAI,cAAc,SAAd,WAAc,GAAU;AACxB;AACA,oBAAI,QAAQ,IAAI,QAAQ,KAAZ,CAAkB,MAAlB,CAAZ;;AAEA;AACA,oBAAI,SAAS,IAAI,QAAQ,UAAZ,CAAuB,SAAvB,EAAkC,IAAI,QAAQ,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,EAAyB,CAAC,EAA1B,CAAlC,EAAiE,KAAjE,CAAb;;AAEA;AACA,uBAAO,SAAP,CAAiB,QAAQ,OAAR,CAAgB,IAAhB,EAAjB;;AAEA;AACA,uBAAO,aAAP,CAAqB,MAArB,EAA6B,KAA7B;;AAEA;AACA,oBAAI,QAAQ,IAAI,QAAQ,gBAAZ,CAA6B,QAA7B,EAAuC,IAAI,QAAQ,OAAZ,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB,CAAvC,EAAmE,KAAnE,CAAZ;;AAEA;AACA,oBAAI,SAAS,QAAQ,IAAR,CAAa,YAAb,CAA0B,SAA1B,EAAqC,EAArC,EAAyC,CAAzC,EAA4C,KAA5C,CAAb;;AAEA;AACA,uBAAO,QAAP,CAAgB,CAAhB,GAAoB,CAApB;;AAEA;AACA,oBAAI,SAAS,QAAQ,IAAR,CAAa,YAAb,CAA0B,SAA1B,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,KAA9C,CAAb;;AAEA;AACA,uBAAO,KAAP;AACH,aA3BD;;AA6BA;AACA,gBAAI,QAAQ,aAAZ;;AAEA;AACA,mBAAO,aAAP,CAAqB,YAAU;AAC3B,sBAAM,MAAN;AACH,aAFD;;AAIA;AACA,mBAAO,gBAAP,CAAwB,QAAxB,EAAkC,YAAU;AACxC,uBAAO,MAAP;AACH,aAFD;AAIH;;;;;;AAGL;AACI;AACA;AACJ;;IAmBa,S,WAAA,S,YAjBZ,oBAAS;AACN,aAAS,gCACQ;AACb;AAFK,KADH;AAKN,kBAAc,CACV,OADU,CACH;AACP;AACA;AACA;AAJU,KALR;AAWN;AACI;AACA;AACJ;AACA,eAAW,CAAC,OAAD;AAfL,CAAT,C;;;;;;;AC5HD;;AACA;;AAEA;;AAEA;;AAPA;;AASA,sDAAyB,eAAzB;;AAEA","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","","//setup app\r\n\r\nimport { NgModule, Component, Input, Attribute } from '@angular/core';\r\n//import { LocationStrategy, HashLocationStrategy } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n//import { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport 'rxjs/add/operator/map';\r\n\r\n//import { Greeter } from './services';\r\n\r\nimport './babylon.min.js';\r\n/*\r\n@Component({\r\n    selector: 'hello',\r\n    template: '<p>{{ message }}</p>',\r\n})\r\nexport class Hello {\r\n    constructor(greeter: Greeter) {\r\n        this.message = greeter.say('hello', 'Angular 2');\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'ciao',\r\n    template: '<p>{{ message$ | async }}</p>',\r\n})\r\nexport class Ciao {\r\n    constructor(greeter: Greeter, route: ActivatedRoute) {\r\n        this.message$ = route.params\r\n        .map(params => greeter.say('ciao', params.name));\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'linker',\r\n    template: '<p><a [href]=\"url\" [title]=\"name\">{{ name }}</a></p>',\r\n})\r\nexport class Linker {\r\n    @Input() url;\r\n\r\n    constructor(@Attribute('name') name) {\r\n        this.name = name;\r\n    }\r\n}\r\n*/\r\n@Component({\r\n    selector: 'main-app',\r\n    template: `\r\n        <!--\r\n        <ul>\r\n            <li><a [routerLink]=\"['/']\">Hello es6</a></li>\r\n            <li><a [routerLink]=\"['/ciao', 'ng2']\">Ciao</a></li>\r\n        </ul>\r\n        <router-outlet></router-outlet>\r\n        <linker name=\"GitHub\" url=\"https://github.com/shuhei/babel-angular2-app\"></linker>\r\n        -->\r\n        <canvas id=\"renderCanvas\"></canvas>\r\n    `,\r\n})\r\nexport class MainApp {\r\n    constructor(){\r\n        var self = this;\r\n        console.log(this);\r\n        console.log(\"main-app\");\r\n        window.addEventListener('DOMContentLoaded', function(){\r\n            self.init();\r\n        });\r\n    }\r\n    init(){\r\n        // get the canvas DOM element\r\n        var canvas = document.getElementById('renderCanvas');\r\n\r\n        // load the 3D engine\r\n        var engine = new BABYLON.Engine(canvas, true);\r\n\r\n        // createScene function that creates and return the scene\r\n        var createScene = function(){\r\n            // create a basic BJS Scene object\r\n            var scene = new BABYLON.Scene(engine);\r\n\r\n            // create a FreeCamera, and set its position to (x:0, y:5, z:-10)\r\n            var camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5,-10), scene);\r\n\r\n            // target the camera to scene origin\r\n            camera.setTarget(BABYLON.Vector3.Zero());\r\n\r\n            // attach the camera to the canvas\r\n            camera.attachControl(canvas, false);\r\n\r\n            // create a basic light, aiming 0,1,0 - meaning, to the sky\r\n            var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), scene);\r\n\r\n            // create a built-in \"sphere\" shape; its constructor takes 5 params: name, width, depth, subdivisions, scene\r\n            var sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene);\r\n\r\n            // move the sphere upward 1/2 of its height\r\n            sphere.position.y = 1;\r\n\r\n            // create a built-in \"ground\" shape; its constructor takes the same 5 params as the sphere's one\r\n            var ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene);\r\n\r\n            // return the created scene\r\n            return scene;\r\n        }\r\n\r\n        // call the createScene function\r\n        var scene = createScene();\r\n\r\n        // run the render loop\r\n        engine.runRenderLoop(function(){\r\n            scene.render();\r\n        });\r\n\r\n        // the canvas/window resize event handler\r\n        window.addEventListener('resize', function(){\r\n            engine.resize();\r\n        });\r\n\r\n    }\r\n}\r\n\r\n//const routing = RouterModule.forRoot([\r\n    //{ path: '', component: Hello },\r\n    //{ path: 'ciao/:name', component: Ciao },\r\n//]);\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule//,\r\n        //routing,\r\n    ],\r\n    declarations: [\r\n        MainApp//,\r\n        //Hello,\r\n        //Ciao,\r\n        //Linker,\r\n    ],\r\n    //providers: [\r\n        //Greeter,\r\n        //{ provide: LocationStrategy, useClass: HashLocationStrategy },\r\n    //],\r\n    bootstrap: [MainApp],\r\n})\r\nexport class AppModule {\r\n\r\n}\r\n","//main entry\r\n\r\nimport 'babel-polyfill';\r\nimport 'zone.js/dist/zone';\r\n\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\r\n/*\r\n//does not work with https://angular.io/docs/ts/latest/quickstart.html that it reqire shim. Since it typescript\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'my-app',\r\n  template: `<h1>Hello {{name}}</h1>`\r\n})\r\nexport class AppComponent { name = 'Angular'; }\r\n*/\r\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}